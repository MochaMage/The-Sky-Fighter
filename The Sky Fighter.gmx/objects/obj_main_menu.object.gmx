<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>options = ds_list_create();

ds_list_add(options, "Play");
ds_list_add(options, "Toggle full screen");
ds_list_add(options, "Quit");

cursor_pos = 0;
can_move_cursor = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_move_cursor</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(can_move_cursor)
{
    cursor_pos -= max(keyboard_check(vk_up), keyboard_check(ord('W')), 0);
    cursor_pos += max(keyboard_check(vk_down), keyboard_check(ord('S')), 0);
    
    if(cursor_pos &lt; 0){
        cursor_pos = ds_list_size(options) - 1;}
    if(cursor_pos &gt;= ds_list_size(options)){
        cursor_pos = 0;}
    
    can_move_cursor = false;
    alarm_set(0, room_speed / 12);
    
    if(keyboard_check(vk_enter))
    {
        switch(options[| cursor_pos])
        {
            case "Play":
                room_goto(test_flight_range);
                break;
            case "Toggle full screen":
               if(window_get_fullscreen())
               {
                    scr_resize_window(1280, 1024);
               }
               else{
                    window_set_fullscreen(true);}
               break;
            case "Quit":
                game_end();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var width = display_get_gui_width();
var height = display_get_gui_height();

draw_text(100, 100, "Width: " + string(width));
draw_text(100, 120, "Height: " + string(height));
draw_text(100, 140, "Sprite x: " + string(width / 2));
draw_text(100, 160, "Sprite y: " + string(height - sprite_get_height(spr_f22)));

draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_set_colour(c_black);
draw_roundrect(0, 0, width / 2, ds_list_size(options) * 20, false);

draw_sprite_ext(spr_f22, 0,  
    width / 2, height - sprite_get_height(spr_f22),
    1, 1, 90, c_white, 1);
    
for(var opt = 0; opt &lt; ds_list_size(options); opt++)
{
    // Default color and font
    var color_top = c_white;
    var color_bottom = c_gray;
    draw_set_font(major_snafu);
    
    // Selected menu option
    if(opt == cursor_pos)
    {
        color_top = c_yellow;
        color_bottom = c_gray;
        draw_set_font(major_snafu_italic);
    }
    draw_text_colour(20, opt * 20, options[| opt], 
        color_top, color_top, color_bottom, color_bottom, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
