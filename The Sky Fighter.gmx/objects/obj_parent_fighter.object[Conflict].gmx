<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Common variables
hp = 0;
image_speed = 0;
turn_angle = 0;
afterburner = false;
bullet_cooldown = 0;
turn_ratio = 0;

/* Dummy variables that should be overriden by
 * child objects
 */
max_turn_angle = 0;
max_afterburner_speed = 0;
afterburner_increment = 0;
afterburner_decrement = 0;
turn_increment = 0;
turn_decrement = 0;
default_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hp &lt;= 0)
{
    instance_create(x, y, obj_fighter_explosion);
    instance_destroy();
}

if(!afterburner &amp;&amp; speed &gt; default_speed)
    {speed -= afterburner_decrement;}

if(bullet_cooldown &gt; 0)
    {bullet_cooldown--;}

if(abs(turn_angle) &gt; max_turn_angle / 2)
    {image_index = 1;}
else
    {image_index = 0;}

if(turn_angle &lt; 0)
    {image_yscale = -1;}
else
    {image_yscale = 1;}
    
// A child class wants to begin turning
if(turn_ratio != 0)
{
    var thing = abs(max_turn_angle * turn_ratio);
    var thing2 = abs(turn_angle);
    var thing3 = thing2 &lt; thing;
    var thing4 = false;
    if(3 &lt; 2)
    {
        show_debug_message("STUPPID");
    }
    if(thing3)
    {
        turn_angle += (abs(turn_ratio)/turn_ratio) * turn_increment;
    }
}
else if(turn_angle != 0)
{
    turn_angle -= (abs(turn_angle)/turn_angle) * turn_decrement;
}

direction += turn_angle;
image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(0, 20, "Bullet cooldown: " + string(bullet_cooldown))
draw_text(0, 40, "Turn angle: " + string(turn_angle))
draw_text(0, 60, "turn ratio: " + string(turn_ratio))
draw_text(0, 80, "max turn angle: " + string(max_turn_angle))
draw_text(0, 100, "turn: " + string(max_turn_angle * turn_ratio))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
