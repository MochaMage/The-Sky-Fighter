<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_advanced_chaser</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ROOM_BOUNDARY_PADDING = 300;
ROTATION_STEPS = 0.25;
NUM_LOOK_AHEAD_STEPS = 10;
PLAYER_ANTICOLLISION_DIST = 250;
MAX_TURN_ANGLE = 2;
TURN_INCREMENT = 0.10;
TURN_DECREMENT = 0.5;
CHASER_SPEED = 5;
CHASER_BULLET_SPEED = CHASER_SPEED * 5;
CHASER_BULLET_INTERVAL = room_speed / 10;
GUN_RANGE = 400;
POINT_WORTH = 75;

hp = 50;
turn_angle = 0;
spd = CHASER_SPEED;
chaser_state = state.scanning;
point_worth = POINT_WORTH;
max_turn_angle = MAX_TURN_ANGLE;
turn_decrement = TURN_DECREMENT;
turn_increment = TURN_INCREMENT;
spd = CHASER_SPEED;
to_string = "Advanced Chaser";
goal_x = 0;
goal_y = 0;

// Create an invisible object to plan out the path with no obstacles to follow a number of pixels ahead 
min_distance = MP_GRID_CELL_SIZE * 1.25;
max_distance = MP_GRID_CELL_SIZE * 1.5;
pathfinder = instance_create(x + 2 * lengthdir_x(max_distance, direction), y + 2 * lengthdir_y(max_distance, direction), obj_pathfinder);
pathfinder.follower = id;
    
get_new_scan_location();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the pathfinder
instance_destroy(pathfinder);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(pathfinder))
{
    if(can_shoot &amp;&amp; chaser_state == state.chasing)
    {
        var bullet_speed = CHASER_BULLET_SPEED + speed;
        var will_hit = scr_shot_prediction(x, y, direction, bullet_speed,
            pathfinder.scan_result.x, 
            pathfinder.scan_result.y, 
            pathfinder.scan_result.direction, 
            pathfinder.scan_result.speed, 
            room_speed);
            
        if(will_hit)
        {
            var bullet = instance_create(x, y, obj_enemy_basic_bullet);
            bullet.image_angle = image_angle;
            bullet.speed = CHASER_BULLET_SPEED + speed;
            bullet.direction = image_angle;
            alarm[0] = CHASER_BULLET_INTERVAL;
            can_shoot = false;
        }
    }
    mp_potential_settings(3.5, 1.75, 30, false);
    mp_potential_step(pathfinder.x, pathfinder.y, spd, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
