<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x_percentage = .20;
y_percentage = .20;
edge_offset = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var scale_factor = 0;

if(room_width &gt; room_height){
    scale_factor = (window_get_width() * x_percentage) / room_width;}
else{
    scale_factor = (window_get_height() * y_percentage)/ room_height;}
    
var minimap_width = room_width * scale_factor;
var minimap_height = room_height * scale_factor;

var left_corner_x = edge_offset;
var left_corner_y = window_get_height() - minimap_height - edge_offset;
var right_corner_x = minimap_width + left_corner_x;
var right_corner_y = window_get_height() - edge_offset;
    
draw_set_alpha(0.75);
draw_roundrect_colour(left_corner_x - edge_offset, left_corner_y - edge_offset, 
    right_corner_x + edge_offset, right_corner_y + edge_offset, c_green, c_black, false);
draw_roundrect_colour(left_corner_x - edge_offset, left_corner_y - edge_offset, 
    right_corner_x + edge_offset, right_corner_y + edge_offset, c_black, c_olive, true);
draw_set_alpha(1);


for (var i = 0; i &lt; instance_number(obj_parent_fighter); i++)
{
   var fighter = instance_find(obj_parent_fighter, i);
   var fighter_minimap_pos_x = fighter.x * scale_factor + left_corner_x;
   var fighter_minimap_pos_y = fighter.y * scale_factor + left_corner_y;
   var fighter_direction = fighter.direction;
   
   if(object_get_parent(fighter.object_index) == obj_enemy){
    draw_set_colour(c_red);}
   else{
    draw_set_colour(c_yellow);}
    
   draw_triangle(lengthdir_x(10, fighter_direction) + fighter_minimap_pos_x, 
        lengthdir_y(15, fighter_direction) + fighter_minimap_pos_y,
        lengthdir_x(5, fighter_direction + 90) + fighter_minimap_pos_x,
        lengthdir_y(5, fighter_direction + 90) + fighter_minimap_pos_y,
        lengthdir_x(5, fighter_direction - 90) + fighter_minimap_pos_x,
        lengthdir_y(5, fighter_direction - 90) + fighter_minimap_pos_y, false);
}

   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
